(Screens 0 and 1 omitted from this text version because they're pure data.
Refer to the ATR file for that data.)

Scr # 2 
  0  \ WORMS? COPYRIGHT (C) 1983 BY
  1 DAVID S. MAYNARD
  2  ( WITH DISK/IO WITHOUT BUILDS D
  3 OES  )
  4  ( MASTER   APRIL 18, 1983.  ATA
  5 RI 800  FINAL   ) HEX
  6   8000 CONSTANT HIMEM HIMEM 1000
  7  - CONSTANT PMAREA
  8  CODE ?TERMINAL
  9 
 10    D01F LDA, 7 # EOR, 7 # AND,
 11 
 12    PHA, 0 # LDA, PUSH JMP,
 13 
 14    END-CODE
 15 

Scr # 3 
  0  : SOUND
  1 
  2    0232 C@ 07 AND
  3 
  4    D20F C! 0 D208 C!
  5 
  6    2 * D200 + >R >R 10 * OR
  7 
  8    EF AND
  9 
 10    100 * R> OR R> ! ;
 11 
 12 : XSND
 13 
 14   D208 D200 DO 0 I C! LOOP ;  ;S
 15 


Scr # 4 
  0  ( WORM GAME START )  HEX
  1 
  2   : <-> CONSTANT ;  : < U< ;
  3 
  4   : VAR VARIABLE ;
  5 
  6  4 <-> 4  8 <-> 8 5 <-> 5 6 <->
  7 6 3F <-> 3F FF <-> FF
  8  40 <-> 40 A <-> A 10 <-> 10 7 <
  9 -> 7 20 <-> 20 FFFF <-> FFFF
 10  -1 <-> -1 28 <-> 28 F0 <-> F0 8
 11 0 <-> 80 9 <-> 9 200 <-> 200
 12  50 <-> 50 21E <-> 21E 4C <-> 4C
 13  22E <-> 22E 220 <-> 220 F <-> F
 14  14 <-> #H  16 <-> #V  12 <-> #D
 15 H 12  <-> #DV 1 <-> H0 1 <-> V0


Scr # 5 
  0  #DH 2 / <-> STX
  1 
  2  #DV 2 / <-> STY
  3 
  4  0 <-> W# 0 <-> 2*W#
  5 
  6  0 VAR QFLG
  7 
  8  : STOP ?TERMINAL QFLG @ OR
  9 
 10    DUP QFLG ! ;
 11 
 12  : CONT STOP 0= ;
 13 
 14 
 15 
?

Scr # 6 
  0  ( WORM GAME CONSTANTS   )
  1 
  2  4 <-> MAX#W #H 1 - <-> #H-1
  3 
  4  #V 1 - <-> #V-1 FF <-> UNDFMOVE
  5 
  6  #DH 1 - <-> #DH-1
  7 
  8  #DV 1 - <-> #DV-1
  9 
 10  F1 <-> GETNEW# F2 <-> DOAI# F3
 11 <-> DIE#
 12 
 13 
 14   6 <-> NOMOVE
 15 


Scr # 7 
  0  3 VAR DEN ( DENSITY )
  1 
  2  0 VAR #WORMS
  3 
  4  0 VAR WORMV  1 VAR GPR
  5 
  6  C VAR MXLUM  0A VAR STO
  7 
  8  1 <-> PWDTH
  9 
 10  0 VAR HCSHI
 11 
 12  0 VAR LOCK ( INTERLOCK FOR FORT
 13 H VBI ! IN UPDMAP )
 14             ( LOCKED IN UPDMAP C
 15 HECKED IN CDEST2 )


Scr # 8 
  0  ( WORM GAME CONSTANTS CONT )
  1 
  2  ( FIRST 1 + 800 / 800 * 800 - )
  3 
  4  ( 02E5 @ C1F - ) PMAREA DUP <->
  5  PMA
  6   200 - DUP <-> WCHSET ( FITS! )
  7 
  8   #H #V * - <-> WDATA
  9 
 10  D40A <-> WSYNC E4 <-> MAXPOT
 11 
 12  022F <-> DMACTL D01D <-> GRACTL
 13 
 14  D407 <-> PMBASE
 15 
?

Scr # 9 
  0  2C8 <-> COLBK 2C4 <-> COLPF0
  1 
  2  2C5 <-> COLPF1 2C6 <-> COLPF2
  3 
  4  2C7 <-> COLPF3 2C0 <-> COLPM0
  5 
  6  2C1 <-> COLPM1 2C2 <-> COLPM2
  7 
  8  2C3 <-> COLPM3 26F <-> GPRIOR
  9 
 10  D300 <-> PORTA 0270 <-> POT0
 11 
 12  D40E <-> NMIEN   ;S
 13 
 14 
 15 


Scr # 10 
  0  ( SOUND TABLES AND CONST     )
  1 
  2   D201 <-> AUDC D200 <-> AUDF
  3 
  4   D208 <-> AUDCTL 1 VAR VBION
  5 
  6  HERE
  7 
  8    0 , 0 , 0 , 0 ,
  9 
 10  <-> FRQT ( FREQ. TABLE )
 11 
 12  HERE
 13 
 14    0 , 0 , 0 , 0 ,
 15 


Scr # 11 
  0  <-> CDT  ( COUNT DOWN TIMERS )
  1 
  2 
  3 
  4  CODE  DECCDT ( DECREMENT CDT )
  5 
  6   0 #  LDA,
  7 
  8   CDT ,X CMP,  0= NOT
  9 
 10   IF, CDT ,X DEC, THEN,
 11 
 12   RTS, END-CODE
 13 
 14    ;S
 15 
?

Scr # 12 
  0  ( MAP VBI TABLES AND CONTS )
  1 
  2  HERE  PMA ,
  3 
  4    PMA , PMA , PMA ,
  5 
  6  <-> MAPX ( MAPADDR TABLE )
  7 
  8  HERE
  9 
 10    0 , 0 , 0 , 0 ,
 11 
 12  <-> MAPCDT ( MAP CD TIMER )
 13 
 14  HERE
 15 


Scr # 13 
  0   0 , 0 , 0 , 0 ,
  1 
  2  <-> MAPMOVE ( MOVE ARRY )
  3 
  4  CODE DECMAP ( DECREMENT CDT )
  5 
  6   0 # LDA,
  7 
  8   MAPCDT ,X CMP,  0= NOT
  9 
 10   IF, MAPCDT ,X DEC, THEN,
 11 
 12   RTS, END-CODE
 13 
 14   ;S
 15 


Scr # 14 
  0  ( INTERRUPT ROUTINES UPDHS)
  1 
  2     0 VAR HPSHAD 4 ALLOT
  3 
  4    CODE UPDHS ( UPD HRZ POS  )
  5 
  6   HPSHAD     LDA, D000 STA,
  7 
  8   HPSHAD 1 + LDA, D001 STA,
  9 
 10   HPSHAD 2 + LDA, D002 STA,
 11 
 12   HPSHAD 3 + LDA, D003 STA,
 13 
 14   RTS,  END-CODE
 15 
?

Scr # 15 
  0 ( : CTABLE <BUILDS !CSP 3 HERE
  1      )
  2 (   0 , DOES> 2+ ;
  3      )
  4 ( : ENDTAB HERE OVER - 2 - SWAP
  5 !    )
  6 (   3 ?PAIRS ?CSP ;
  7      )
  8 ( : TAB# 2 - @ ;
  9      )
 10 ( : WTABLE <BUILDS !CSP 3 HERE
 11      )
 12 (  0 , DOES> 2+ ;
 13      )
 14  ;S
 15 


Scr # 16 
  0  ( INTERRUPT ROUTINES SETVOL )
  1 
  2  HERE
  3 
  4  A5 C, A7 C, A6 C, A6 C, A5 C, A
  5 5 C, A5 C, A4 C,
  6  A4 C, A3 C, A2 C, A1 C, A0 C, A
  7 0 C, A0 C, A0 C,
  8 
  9 
 10  A8 C, A7 C, A6 C, A6 C, A5 C, A
 11 4 C, A3 C, A3 C,
 12  A4 C, A3 C, A2 C, A1 C, A0 C, A
 13 0 C, A0 C, A0 C,
 14 
 15 


Scr # 17 
  0  A6 C, A8 C, A7 C, A6 C, A5 C, A
  1 4 C, A3 C, A2 C,
  2  A2 C, A1 C, A0 C, A0 C, A0 C, A
  3 0 C, A0 C, A0 C,
  4 
  5 
  6  A6 C, A8 C, A6 C, A4 C, A3 C, A
  7 2 C, A1 C, A0 C,
  8  A0 C, A0 C, A0 C, A0 C, A0 C, A
  9 0 C, A0 C, A0 C,
 10 
 11 
 12  <-> ENV
 13 
 14 ;S
 15 
?

Scr # 18 
  0  (  PMXTAB SETVOL             )
  1 
  2  CODE SETVOL ( SETVOLUME )
  3 
  4   CDT ,X LDA, 0=   IF, 0 # LDA,
  5 
  6   AUDC ,X STA, FRQT ,X STA,
  7 
  8   ELSE, STO  LDA, SEC,
  9 
 10   CDT ,X SBC, F # AND, F8 STA, T
 11 XA,
 12   .A ASL, .A ASL, .A ASL, CLC, F
 13 8 ADC, CLC,
 14   TAY, ENV ,Y LDA,
 15 


Scr # 19 
  0   ( F # AND, A0 # ORA, )
  1 
  2   AUDC ,X STA,
  3 
  4   ( FRQT ,X LDA, AUDF ,X STA, )
  5 
  6   ( 0 # LDA, AUDCTL STA, )
  7 
  8   THEN,  CLC, RTS, END-CODE ;S
  9 
 10  CTABLE PMXTAB  3C C, 64 C, 8C C
 11 , B4 C,
 12   ENDTAB
 13 
 14  ;S
 15 


Scr # 20 
  0  ( INTERRUPT DAMPPOT  )
  1 
  2  0 VAR CPOT 4 ALLOT
  3 
  4  CODE DAMPPOT ( DAMP POT )
  5 
  6   CPOT ,X LDA, SEC,
  7 
  8   POT0 ,X CMP,
  9 
 10    CS IF, SEC, POT0 ,X SBC,
 11 
 12    .A LSR, .A LSR, SEC,
 13 
 14    FF # EOR, CLC, CPOT ,X ADC,
 15 
?

Scr # 21 
  0      CPOT ,X STA, ELSE,
  1 
  2     POT0 ,X LDA, SEC,
  3 
  4     CPOT ,X SBC, .A LSR, .A LSR,
  5  .A LSR,
  6     CLC, CPOT ,X ADC,
  7 
  8     CPOT ,X STA,
  9 
 10   THEN,
 11 
 12   CLC, RTS, END-CODE
 13 
 14  ;S
 15 


Scr # 22 
  0  ( INTERRUPT ROUTINES RPOTS )
  1 
  2  0 VAR WPOT 2 ALLOT 0 VAR PSCAN
  3 
  4 ( CODE RPOT ( READ POT       )
  5 
  6 ( ' DAMPPOT JSR,              )
  7 
  8 ( E6 # LDA, SEC, CPOT ,X SBC, )
  9 
 10 ( .A LSR, .A LSR, .A LSR,     )
 11 
 12 ( 7 # AND, 6 # CMP, BCS,    )
 13 
 14 ( IF, 5 # LDA, THEN,        )
 15 


Scr # 23 
  0 ( WPOT ,X STA,  CLC, RTS, END-CO
  1 DE  )
  2  CODE RPOTS ( READ POTS )
  3 
  4   PSCAN LDA, 0= NOT IF,
  5 
  6   0 # LDX, BEGIN,
  7 
  8   ' DAMPPOT JSR,
  9 
 10   INX, 4 # CPX, 0=
 11 
 12   UNTIL, CLC, THEN, RTS, END-COD
 13 E
 14   ;S
 15 
?

Scr # 24 
  0  ( WORM PRIMITIVES .XPOS ETC )
  1 
  2  : .XPOS ( WORM -> XPOS ) C@ ;
  3 
  4  : .YPOS 1+ C@ ;
  5 
  6  : .LOC 2+ @ ;
  7 
  8  : .#MOVES 4 + @ ;
  9 
 10  CODE .STATUS 1 # LDA, SETUP JSR
 11 , 6 # LDY, N )Y LDA, PHA,
 12    0 # LDA, PUSH JMP, END-CODE
 13 
 14  CODE .WRM# 1 # LDA, SETUP JSR,
 15 7 # LDY, N )Y LDA, PHA,


Scr # 25 
  0    0 # LDA, PUSH JMP, END-CODE
  1 
  2  : .MOVE ( WORM N -> MOVE )
  3 
  4     B + + C@ ;
  5 
  6  : !XPOS ( WORM XPOS )
  7 
  8    SWAP C! ;
  9 
 10  : !YPOS SWAP 1+ C! ;
 11 
 12  : !LOC SWAP 2+ ! ;
 13 
 14  : !#MOVES SWAP 4 + ! ;     ;S
 15 


Scr # 26 
  0  ( WORM PRIMITIVES CONT )
  1 
  2  : .HPOS ( WORM )
  3 
  4    8 + C@ ;
  5 
  6  : !HPOS ( WORM HPOS )
  7 
  8    SWAP 8 + C! ;
  9 
 10  : .VPOS  9 + C@ ;
 11 
 12  : !VPOS SWAP 9 + C! ;
 13 
 14  : .CRIX A + C@ ;
 15 
?

Scr # 27 
  0  : !CRIX SWAP A + C! ;
  1 
  2  : .TMO 4C + @ ;
  3 
  4  : !TMO SWAP 4C + ! ;
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 28 
  0  ( #BITS WAIT               )
  1 
  2 \  : ENDIF [COMPILE] THEN ; IMME
  3 DIATE
  4  : #BITS  (  BYTE -> #BITS )
  5 
  6   0 OVER 1 AND IF 1+ ENDIF
  7 
  8   OVER 2 AND IF 1+ ENDIF
  9 
 10   OVER 4 AND IF 1+ ENDIF
 11 
 12   OVER 8 AND IF 1+ ENDIF
 13 
 14   OVER 10 AND IF 1+ ENDIF
 15 


Scr # 29 
  0   OVER 20 AND IF 1+ ENDIF SWAP
  1 
  2   DROP ;
  3 
  4  : WAIT ( TICKS -> )
  5 
  6   0 220 ! FF 22E C! 1 MAX
  7 
  8   220 ! BEGIN 22E C@ 0= UNTIL
  9 
 10   ;
 11 
 12  ;S
 13 
 14 
 15 
?

Scr # 30 
  0  ( WORM PRIMITIVES CNT WAITTAB )
  1 
  2  : !STATUS SWAP 6 + C! ;
  3 
  4  : !WORM# SWAP 7 + C! ;
  5 
  6  : !MOVE ( WORM N MOVE )
  7 
  8    SWAP ROT B + + C! ;
  9 
 10  : .VAL .LOC C@ ;
 11 
 12  : !VAL SWAP .LOC C! ;
 13 
 14  : [.VAL] .VAL 3F AND ;
 15 


Scr # 31 
  0 ( : CWAITTAB <BUILDS         )
  1 
  2 (  2 C, 2 C, 2 C, 2 C,  2 C, )
  3 
  4 (   2 C,  2 C,  DOES> ;      )
  5 
  6 ( CWAITTAB WAITTAB           )
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 32 
  0  ( WORM PRIMITIVES CONT )
  1 
  2  : .KIND 4B + C@ ;
  3 
  4  : !KIND SWAP  4B + C! ;
  5 
  6  : .SCORE 4C + @ ;
  7 
  8  : !SCORE SWAP 4C + ! ;
  9 
 10  : .NAME 4E + ;
 11 
 12  : 2* DUP + ;
 13 
 14  : 3* DUP 2* + ;
 15 
?

Scr # 33 
  0  : 4* 2* 2* ;
  1 
  2  : 8* 4* 2* ;
  3 
  4  55 <-> COLCRS  54 <-> ROWCRS
  5 
  6 : X! COLCRS ! ; : X@ COLCRS @ ;
  7 
  8 : Y! ROWCRS C! ; : Y@ ROWCRS C@
  9 ;
 10 : XY!  Y! X! ;   : ^ 1 0 XY! ;
 11 
 12 : P" 0 2 XY! ;    ;S
 13 
 14  ;S
 15 


Scr # 34 
  0  ( WORM TABLE BUILDERS )
  1 
  2  HERE
  3 
  4   3 C, 4 C, 5 C, 0 C, 1 C, 2 C,
  5 
  6    <-> NMOVE
  7 
  8  HERE
  9 
 10   1 , 0 , -1 , -1 , -1 , 0 ,
 11 
 12    <-> XINCE
 13 
 14  HERE
 15 


Scr # 35 
  0   1 , 1 , 0 , -1 , 0 , 1 ,
  1 
  2   <-> XINCO
  3 
  4  HERE
  5 
  6   0 , 1 , 1 , 0 , -1 , -1 ,
  7 
  8  <-> YINC
  9 
 10  ;S
 11 
 12 
 13 
 14 
 15 
?

Scr # 36 
  0  ( TABLE BUILDERS PMTAB )
  1 
  2  HERE
  3 
  4     PMA 200 + ,
  5 
  6     PMA 280 + ,
  7 
  8     PMA 300 + ,
  9 
 10     PMA 380 + ,
 11 
 12  <-> PMTAB
 13 
 14  HERE
 15 


Scr # 37 
  0  26 C, 56 C, 86 C, C6 C, <-> COL
  1 PFT
  2  HERE
  3 
  4  1C C, 5C C, 8C C, CC C, <-> COL
  5 PMT
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 38 
  0  ( PLAYER MAPS )
  1 
  2  HERE
  3 
  4   00 C, 00 C, 00 C, 0F C, ( 0 )
  5 
  6   00 C, 00 C, 00 C, 00 C,
  7 
  8   00 C, 00 C, 00 C, 00 C, ( 1 )
  9 
 10   08 C, 04 C, 04 C, 02 C,
 11 
 12   00 C, 00 C, 00 C, 00 C, ( 2 )
 13 
 14   10 C, 20 C, 20 C, 40 C,
 15 
?

Scr # 39 
  0   00 C, 00 C, 00 C, F0 C, ( 3 )
  1 
  2   00 C, 00 C, 00 C, 00 C,
  3 
  4   40 C, 20 C, 20 C, 10 C, ( 4 )
  5 
  6   00 C, 00 C, 00 C, 00 C,
  7 
  8   02 C, 04 C, 04 C, 08 C, ( 5 )
  9 
 10   00 C, 00 C, 00 C, 00 C,
 11 
 12   00 C, 00 C, 00 C, 00 C, ( 6 )
 13 
 14   00 C, 00 C, 00 C, 00 C,    ;S
 15 


Scr # 40 
  0  ( PLAYER MAPS CONT   )
  1 
  2   24 C, 24 C, 18 C, FF C, ( 7 )
  3 
  4   18 C, 18 C, 24 C, 24 C,
  5 
  6   00 C, 42 C, 24 C, 7E C, ( 8 )
  7 
  8   18 C, 24 C, 42 C, 00 C,
  9 
 10   24 C, 24 C, 18 C, 7E C, ( 9 )
 11 
 12   18 C, 18 C, 24 C, 24 C,
 13 
 14   00 C, 00 C, 00 C, 18 C, ( 10 )
 15 


Scr # 41 
  0   18 C, 00 C, 00 C, 00 C,
  1 
  2   <-> CRMAP
  3 
  4  0 VAR ANONB ( ANIMATION ON )
  5 
  6  : ANON 1 ANONB ! ;
  7 
  8  ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 
?

Scr # 42 
  0   HERE
  1 
  2   00 C, 00 C, 00 C, 18 C,
  3 
  4   18 C, 00 C, 00 C, 00 C, ( 0 )
  5 
  6   00 C, 00 C, 3C C, 3C C,
  7 
  8   3C C, 3C C, 00 C, 00 C, ( 1 )
  9 
 10   00 C, 7E C, 7E C, 7E C,
 11 
 12   7E C, 7E C, 7E C, 00 C, ( 2 )
 13 
 14   FF C, FF C, FF C, FF C,
 15 


Scr # 43 
  0   FF C, FF C, FF C, FF C, ( 3 )
  1 
  2   FF C, FF C, FF C, E7 C,
  3 
  4   E7 C, FF C, FF C, FF C, ( 4 )
  5 
  6   FF C, FF C, C3 C, C3 C,
  7 
  8   C3 C, C3 C, FF C, FF C, ( 5 )
  9 
 10   FF C, 81 C, 81 C, 81 C,
 11 
 12   81 C, 81 C, 81 C, FF C, ( 6 )
 13 
 14   ;S
 15 


Scr # 44 
  0  ( INTERRUPT CRMAP ROUTINES )
  1 
  2   0 C, 0 C, 0 C, 0 C,
  3 
  4   0 C, 0 C, 0 C, 0 C, ( 7 )
  5 
  6   <-> MAPMASK
  7 
  8  CRMAP VAR CRMADDR
  9 
 10  CODE CSOURCE ( ASSUMES X )
 11 
 12   CLC, MAPMOVE ,X LDA,
 13 
 14   .A ASL, .A ASL, .A ASL,
 15 
?

Scr # 45 
  0   CLC, CRMADDR ADC, F9 STA,
  1 
  2   0 # LDA, CRMADDR 1+ ADC,
  3 
  4   FA STA, CLC, RTS, END-CODE
  5 
  6 
  7 
  8  : GCMD WCHSET 3 + @ IF 0 WCHSET
  9  3 + C! ELSE
 10                         8 WCHSET
 11  3 + C! THEN ;
 12  ;S
 13 
 14 
 15 


Scr # 46 
  0  ( CDEST CCANDM VBISMASK VBIMASK
  1 TAB )
  2  MAPMASK VAR MMADDR 0 VAR VBISMA
  3 SK  1 VAR VBIMAPMASK
  4  HERE  ( PAIRS: MASKVAL , STOVAL
  5  )
  6   0 C,  2 C, 0 C, 04 C, 0 C, 06
  7 C,
  8   0 C,  8 C, 0 C, 0C C, 0 C, 10
  9 C,
 10   1 C, 10 C, 3 C,  C C, 7 C, 10
 11 C, F C, 10 C, <-> VBIMASKT
 12  CODE CDEST2 CLC, LOCK LDA, 0= I
 13 F,
 14   MAPX ,X LDA,
 15 


Scr # 47 
  0   FB STA, MAPX 1+
  1 
  2  ,X LDA, FC STA, CLC, THEN, RTS,
  3  END-CODE
  4  CODE CANDM ( AND MASK ADDR )
  5 
  6   7 # LDA, SEC, MAPCDT ,X SBC,
  7 
  8   CLC, .A ASL, .A ASL, .A ASL,
  9 
 10   MMADDR ADC, F7 STA,
 11 
 12   0 # LDA, MMADDR 1+ ADC,
 13 
 14   F8 STA,  CLC, RTS, END-CODE ;S
 15 
?

Scr # 48 
  0  ( INTRPT CODE CHAR ANIMATION  )
  1 
  2  CRMAP 7 8 * + <-> SRCBASE 14 <-
  3 > CLKLO
  4  WCHSET 3F 8 * + <-> DESTBAS
  5 
  6  : ANOFF 0 ANONB ! 8 0 DO
  7 
  8    SRCBASE I + C@ DESTBAS I +
  9 
 10    C! LOOP ;
 11 
 12  CODE ANIM
 13 
 14   ANONB LDA, 0= NOT IF, CLKLO LD
 15 A, 3 # AND, 0= IF,


Scr # 49 
  0   CLKLO LDA,  1C # AND,
  1 
  2   .A ASL,  TAY,
  3 
  4   7 # LDX, BEGIN,
  5 
  6   SRCBASE ,X LDA,
  7 
  8   MAPMASK ,Y AND, DESTBAS ,X
  9 
 10   STA, DEX, INY, FF # CPX,
 11 
 12   0= UNTIL,  THEN,
 13 
 14   THEN, CLC, RTS, END-CODE  ;S
 15 


Scr # 50 
  0  ( INTRPT CODE VBISND WRTP )
  1 
  2  CODE VBISND ( VERTICAL BLANK )
  3 
  4   VBION LDA, 0= NOT
  5 
  6   IF, ( ' ANIM JSR, )
  7 
  8        8 # LDX, BEGIN, DEX, DEX,
  9 
 10   ' SETVOL JSR,
 11 
 12   ' DECCDT JSR,
 13 
 14   0 # CPX, 0= UNTIL,
 15 
?

Scr # 51 
  0   CLC, THEN,
  1 
  2   CLC, RTS, END-CODE
  3 
  4  CODE WRTP ( WRITE PLAYERS ) LOC
  5 K LDA, 0= IF,
  6   7 # LDY, BEGIN,
  7 
  8   F9 )Y LDA, F7 )Y AND,
  9 
 10   FB )Y STA,
 11 
 12   DEY, FF #  CPY, 0=
 13 
 14   UNTIL, THEN,  CLC, RTS, END-CO
 15 DE ;S


Scr # 52 
  0  ( INTERRUPT ROUTINES VBI     )
  1 
  2  CODE VBI ( VERTICAL BLANK )
  3 
  4   CLKLO LDA, VBISMASK AND, 0= IF
  5 , ' VBISND JSR, THEN,
  6   ' ANIM JSR,
  7 
  8   ' RPOTS JSR,  CLKLO LDA,
  9 
 10   VBIMAPMASK AND, 0=   IF,
 11 
 12   0 # LDX, BEGIN,
 13 
 14   MAPCDT ,X LDA, 0= NOT IF,
 15 


Scr # 53 
  0   ' CSOURCE JSR, ' CDEST2 JSR,
  1 
  2   ' CANDM JSR, ' WRTP JSR,
  3 
  4   ' DECMAP JSR, THEN,
  5 
  6               INX, INX,
  7 
  8   8 # CPX, 0=   UNTIL,
  9 
 10   THEN,  ' UPDHS JSR,  CLC,
 11 
 12   E462 JMP, END-CODE ( SYS VBI R
 13 ETURN)
 14  ;S
 15 
?

Scr # 54 
  0  ( ?SPEED  ?SPEED2 CNFRM     )
  1 
  2  : ACMD ANONB @ IF ANOFF ELSE AN
  3 ON  THEN ;
  4  : ?SPEED2  02FC C@ FF = IF
  5 
  6      ELSE KEY DUP 2F > IF
  7 
  8         DUP 3A < IF
  9 
 10           39 SWAP - 2*  VBIMASKT
 11  + DUP C@ DUP  VBISMASK C!
 12           1 MAX VBIMAPMASK C!  1
 13 + C@ STO !
 14          ELSE DROP THEN
 15 


Scr # 55 
  0         ELSE DROP THEN THEN ;
  1 
  2  : ?SPEED
  3 
  4     02FC C@ FF = IF ELSE  02FC C
  5 @ 38 = IF KEY DROP ACMD THEN
  6     02FC C@ >R R 17 > R 20 < AND
  7 
  8                R 2F > R> 36 < AN
  9 D OR
 10     IF ?SPEED2 THEN THEN ;
 11 
 12  : PROMPT2 P"  ."
 13       " ;
 14  : CNFRM KEY D = DUP IF ELSE PRO
 15 MPT2 THEN ; ;S


Scr # 56 
  0  ( TRIG AND FREQ TABLES CRMAP .G
  1 WADR MOVE8 )
  2  HERE
  3 
  4   04 C, 08 C, 40 C, 80 C,
  5 
  6   <-> TRIGMASK
  7 
  8  : ?START 0 4 0 DO I TRIGMASK +
  9 
 10    C@ PORTA C@ AND 0= OR LOOP
 11 
 12    ?TERMINAL 7 AND OR ;
 13 
 14  : ?CLEAR BEGIN ?START 0= UNTIL
 15 
?

Scr # 57 
  0    ;
  1 
  2  : MOVE8 ( TO FROM )
  3 
  4   SWAP 8 CMOVE ;
  5 
  6 
  7 
  8  ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr # 58 
  0  ( UPDCRLOC ANON ANOFF )
  1 
  2  : UPDCRLOC  ( WORM )
  3 
  4   DUP .XPOS 8* 28 +
  5 
  6   PWDTH 0= IF 4 + ENDIF OVER
  7 
  8   .YPOS 1 AND IF 4 + ENDIF
  9 
 10   2DUP !HPOS
 11 
 12   W# HPSHAD +  C!
 13 
 14   DUP .YPOS 4*  A + !VPOS ;
 15 


Scr # 59 
  0  ;S
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 
?

Scr # 60 
  0  ( UPDMAP UPDMV ZRMAP ZMAP )
  1 
  2  : ZRMAP ( 2*W# -> )
  3 
  4    DUP MAPCDT + 0 SWAP !
  5 
  6    MAPX + @
  7 
  8    30 CRMAP + MOVE8 ;
  9 
 10  : ZMAP ( W )  DROP 2*W# ZRMAP ;
 11 
 12  : UPDMAP ( W ) 2*W#
 13 
 14     >R R ZRMAP
 15 


Scr # 61 
  0   .VPOS PMTAB R + @ +
  1 
  2   MAPX R +  1 LOCK C! !
  3 
  4   0 LOCK C! 7 MAPCDT R> + ! ;
  5 
  6  : UPDMV ( W )
  7 
  8   2*W#
  9 
 10   ( DUP MAPCDT + 4 SWAP ! )
 11 
 12   MAPMOVE +
 13 
 14   SWAP .CRIX SWAP ! ;  ;S
 15 


Scr # 62 
  0  ( WORM BUILDERS CWORM GWORM )
  1 
  2  HERE 0 , 0 , 0 , 0 , <-> WORMS
  3 
  4  : GWORM ( N -> WORM ) DUP + WOR
  5 MS + @ ;
  6  : INITWORM ( ADDR -->  )
  7 
  8   >R R #WORMS @ DUP + WORMS + !
  9 
 10   R STX !XPOS R STY !YPOS R 0 !L
 11 OC R 0 !#MOVES
 12   R 1 !STATUS R #WORMS @ !WORM#
 13 R 0 !HPOS R 0 !VPOS  R 6 !CRIX
 14   R 40 0 DO DUP I GETNEW# !MOVE
 15 LOOP DROP
?

Scr # 63 
  0   R 0 !KIND R 0 !SCORE R> .NAME
  1 >R
  2   53 R C! 41 R 1+ C! 4D R 2+ C!
  3 45 R 3 + C!
  4   R 8 4 DO DUP I + 20 SWAP C! LO
  5 OP DROP
  6   R> DROP 1 #WORMS +! ;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr # 64 
  0  ( KILLW )     HEX
  1 
  2   : KILLW ( WORM -> )
  3 
  4   0 VBION ! DUP A !CRIX
  5 
  6   XSND .WRM# COLPF0 +
  7 
  8   FF 50 DO
  9 
 10   120 I - 10 / OVER C@ F0 AND OR
 11 
 12    OVER C!
 13 
 14   I I 50 - 0 MAX DO
 15 


Scr # 65 
  0     5 F I I 3 AND SOUND 8 +LOOP
  1 
  2   STOP IF LEAVE ENDIF
  3 
  4   8 +LOOP
  5 
  6   5 OVER C@ F0 AND OR SWAP C!
  7 
  8   XSND 1 VBION ! ;
  9 
 10 
 11 
 12 
 13 
 14   ;S
 15 
?

Scr # 66 
  0   ( UPDSTATUS )
  1 
  2  : UPDSTATUS ( WORM )
  3 
  4   DUP .STATUS
  5 
  6   IF DUP [.VAL] 3F =
  7 
  8   IF DUP KILLW 0 !STATUS
  9 
 10   ELSE 1 !STATUS ENDIF
 11 
 12   ELSE DROP  ENDIF ;
 13 
 14 
 15 


Scr # 67 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8  ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr # 68 
  0  ( UPDLOC UPDCOL   TRIGCLR )
  1 
  2  : UPDLOC  ( WORM )
  3 
  4    DUP .XPOS OVER .YPOS #H * +
  5 
  6    WDATA + !LOC ;
  7 
  8  CODE 40* BOT LDA, CLC, .A ROR,
  9 .A ROR, .A ROR,
 10           BOT STA, CLC, NEXT JMP
 11 , END-CODE
 12  : UPDCOL ( WORM )
 13 
 14    DUP [.VAL] W# 40* + !VAL ;
 15 
?

Scr # 69 
  0  : INITAUTO ( WORM  )
  1 
  2   40 0 DO
  3 
  4    DUP I DOAI#  !MOVE LOOP
  5 
  6   DUP 3E 0 !MOVE ( FORCED )
  7 
  8   DUP 3D 1 !MOVE DUP 3B 2 !MOVE
  9 DUP 37 3 !MOVE
 10   DUP 2F 4 !MOVE DUP 3F DIE# !MO
 11 VE
 12       1F 5 !MOVE ;  ;S
 13 
 14 
 15 


Scr # 70 
  0  ( WORM INITIALIZATION )
  1 
  2  : INITPOS ( WORM )
  3 
  4    DUP STX !XPOS DUP STY !YPOS
  5 
  6    DUP NOMOVE !CRIX DUP UPDLOC
  7 
  8    DUP UPDCRLOC DUP UPDMV
  9 
 10    DUP UPDMAP
 11 
 12    DUP 258 !TMO UPDSTATUS ;
 13 
 14  : INITMOVES ( WORM  )
 15 


Scr # 71 
  0   40 0 DO
  1 
  2    DUP I GETNEW#  !MOVE LOOP
  3 
  4   DUP 3E 0 !MOVE ( FORCED )
  5 
  6   DUP 3D 1 !MOVE
  7 
  8   DUP 3B 2 !MOVE
  9 
 10   DUP 37 3 !MOVE
 11 
 12   DUP 2F 4 !MOVE DUP 3F DIE# !MO
 13 VE
 14       1F 5 !MOVE ;  ;S
 15 
?

Scr # 72 
  0  ( DLH SAVELIST BUILDER ) HEX
  1 
  2  230 CONSTANT DLH
  3 
  4  D404 CONSTANT HSCROL
  5 
  6  DLH @ CONSTANT SAVDLH
  7 
  8  SAVDLH 4 + @ <-> SCRMEM
  9 
 10  : RESTORE SAVDLH DLH !
 11 
 12   22 DMACTL C! 0 GRACTL C!
 13 
 14   E0 2F4 C! 28 COLPF0 C! 0 COLPF
 15 1 C!


Scr # 73 
  0   C COLPF2 C! 46 COLPF3 C!
  1 
  2  5 0 DO ( CLEAR PM REGISTRS )
  3 
  4    0 D00D I + C! LOOP ;
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 74 
  0  ( DISPLAY LIST BUILDER ) HEX
  1 
  2  70 ALLOT    14 , HERE HERE 70 C
  3 , 70 C,
  4   56 C, WDATA  0 #H * + , 46 C,
  5 WDATA  1 #H * + ,
  6   56 C, WDATA  2 #H * + , 46 C,
  7 WDATA  3 #H * + ,
  8   56 C, WDATA  4 #H * + , 46 C,
  9 WDATA  5 #H * + ,
 10   56 C, WDATA  6 #H * + , 46 C,
 11 WDATA  7 #H * + ,
 12   56 C, WDATA  8 #H * + , 46 C,
 13 WDATA  9 #H * + ,
 14   56 C, WDATA  A #H * + , 46 C,
 15 WDATA  B #H * + ,
?

Scr # 75 
  0   56 C, WDATA  C #H * + , 46 C,
  1 WDATA  D #H * + ,
  2   56 C, WDATA  E #H * + , 46 C,
  3 WDATA  F #H * + ,
  4   56 C, WDATA 10 #H * + , 46 C,
  5 WDATA 11 #H * + ,
  6   56 C, WDATA 12 #H * + , 46 C,
  7 WDATA 13 #H * + ,
  8   80 C, 60 C, 46 C, SCRMEM 50 +
  9 , 00 C, 40 C,
 10   46 C, SCRMEM , 00 C, 00 C, 46
 11 C, SCRMEM 28 + ,
 12   41 C, , <-> WDL
 13 
 14  ;S
 15 


Scr # 76 
  0  ( WDL SETHSCRL CHARACTER SET DE
  1 F. )
  2 (  HEX #DV 2+ CDL WDL
  3 
  4 ( : SETHSCRL
  5 )
  6 (  DUP 2 - @  1 DO
  7 )
  8 (  DUP I 3 * + 1 - DUP C@ 10 OR
  9 )
 10 (  SWAP C! 2 +LOOP DROP
 11 )
 12 (  C HSCROL C! ;
 13 )
 14 (  WDL SETHSCRL  )
 15 


Scr # 77 
  0   2F4 <-> CHBAS D409 <-> CHBASE
  1 
  2  WCHSET 100 / FF AND <-> WCHSETH
  3 
  4  WCHSETH VAR CHNOW C VAR SCRLVAL
  5 
  6  HERE
  7 
  8  1 C, 2 C, 4 C, 8 C, 10 C, 20 C,
  9 
 10  <-> TMASK
 11 
 12 ;S
 13 
 14 
 15 
?

Scr # 78 
  0  ( CHSET BUILDING TVEC DEFS )
  1 
  2  HERE
  3 
  4  00 C, 00 C, 00 C, 0F C, ( 0 )
  5 
  6  00 C, 00 C, 00 C, 00 C,
  7 
  8  00 C, 00 C, 00 C, 00 C, ( 1 )
  9 
 10  08 C, 08 C, 04 C, 04 C,
 11 
 12  00 C, 00 C, 00 C, 00 C, ( 2 )
 13 
 14  10 C, 10 C, 20 C, 20 C,
 15 


Scr # 79 
  0  00 C, 00 C, 00 C, F0 C, ( 3 )
  1 
  2  00 C, 00 C, 00 C, 00 C,
  3 
  4  20 C, 20 C, 10 C, 10 C, ( 4 )
  5 
  6  00 C, 00 C, 00 C, 00 C,
  7 
  8  04 C, 04 C, 08 C, 08 C, ( 5 )
  9 
 10  00 C, 00 C, 00 C, 00 C,
 11 
 12  <-> TVEC
 13 
 14  ;S
 15 


Scr # 80 
  0  ( CHSET BUILDING )
  1 
  2  : ORCHARVEC ( CHARADDR VECADR )
  3 
  4   8 0 DO 2DUP I + C@
  5 
  6    OVER I + C@ OR SWAP
  7 
  8    I + C! LOOP DROP DROP ;
  9 
 10  : ORCHAR ( CHB CINDX -> CHB )
 11 
 12   6 0 DO 2DUP TMASK I + C@
 13 
 14     AND  IF
 15 
?

Scr # 81 
  0    OVER 8 * +
  1 
  2    TVEC I 8 * + ORCHARVEC
  3 
  4    ELSE DROP ENDIF LOOP
  5 
  6    DROP ;
  7 
  8  : DALLY FF 0 DO I DROP LOOP ;
  9 
 10  : RAND D20A C@ ;
 11 
 12 
 13 
 14  ;S
 15 


Scr # 82 
  0  ( CHSET BUILD WDISPLAY  )
  1 
  2  : CLEARF WDATA #H #V * 0 FILL ;
  3 
  4  : BUILDCHSET ( CHBASE )
  5 
  6    DUP 200 0 FILL
  7 
  8  40 0 DO
  9 
 10   I ORCHAR   LOOP  DROP  8 WCHSE
 11 T 3 + C! ;
 12  : IWDISPLAY 2A DMACTL C!
 13 
 14  02 GRACTL C!   WDL DLH !
 15 


Scr # 83 
  0  C0 NMIEN C! GPR C@ GPRIOR C!
  1 
  2  PMA hi PMBASE C!
  3 
  4  C 0 DO 0 I D000 + C! LOOP
  5 
  6  4 0 DO PWDTH D008 I + C!
  7 
  8  COLPFT I + C@ COLPF0 I + C!
  9 
 10  COLPMT I + C@ COLPM0 I + C!
 11 
 12  LOOP WCHSETH CHBAS C! ;  ;S
 13 
 14 
 15 
?

Scr # 84 
  0  ( [X] [Y] SCALE )
  1 
  2  : [X]   ( X -> X  CLIPS )
  3 
  4  DUP #DH-1 H0 +  > IF #DH - ELSE
  5 
  6  DUP H0 < IF #DH + ENDIF ENDIF ;
  7 
  8  : [Y]  ( Y -> Y CLIPS )
  9 
 10  DUP #DV-1 V0 + > IF #DV - ELSE
 11 
 12     DUP V0 < IF #DV + ENDIF
 13 
 14   ENDIF ;
 15 


Scr # 85 
  0  HERE
  1 
  2   FF C, E3 C, BF C, AA C,
  3 
  4   97 C, 7F C, 71 C, 5F C,
  5 
  6   57 C, 4B C, 3F C, 38 C,
  7 
  8   2F C, 2A C, 25 C, 1F C,
  9 
 10   25 C, 1F C, <-> SCALE
 11 
 12 
 13 
 14  ;S
 15 


Scr # 86 
  0  ( SOUND BSND MSND PWORM )
  1 
  2   : BSND ( WORM --> ) DROP
  3 
  4   2*W# DUP FRQT + FF SWAP !
  5 
  6   CDT + 10 SWAP ! ;
  7 
  8  C VAR FV 4 VAR BV ( FOR,BK VOL)
  9 
 10  : MSND ( W M )  0 AUDCTL C! 3
 11 232 ( SKCTL) C!
 12  W# >R SWAP .STATUS
 13 
 14  IF R 3* + SCALE + C@ DUP R R +
 15 AUDF + C!
?

Scr # 87 
  0     R R + FRQT + ! STO @
  1 
  2     R R + CDT  + ! ELSE
  3 
  4   0 R R + FRQT + !
  5 
  6 0 R R + CDT  + ! ENDIF R> DROP ;
  7 
  8  : PWORM 1 VBION !
  9 
 10   3F 0 DO DUP DUP I
 11 
 12  .MOVE MSND 8 WAIT  LOOP
 13 
 14  DROP XSND 0 VBION ! ;  ;S
 15 


Scr # 88 
  0  ( [MOVE] DECTMO GXINC XY! X! Y!
  1  ^ )
  2  : [MOVE] ( WORM M -> WORM M )
  3 
  4   DUP 5 > IF OVER BSND ELSE
  5 
  6    OVER .VAL OVER TMASK + C@
  7 
  8    AND IF DROP GETNEW#
  9 
 10    ENDIF ENDIF ;
 11 
 12  : DECTMO ( W -> )
 13 
 14   DUP .TMO 13 - 50 MAX !TMO ;
 15 


Scr # 89 
  0  : GXINC ( WORM -> XINCV )
  1 
  2   .YPOS 1 AND IF XINCO ELSE
  3 
  4  XINCE ENDIF ;
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12  ;S
 13 
 14 
 15 
?

Scr # 90 
  0  (  ?SPACE ?CR MOVEOK DETRACT TI
  1 MEOUT )
  2 : ?SPACE 02FC C@ 3F AND 21 = IF
  3 KEY 20 =
  4    ELSE 0 THEN ;
  5 
  6 : ?NOTSP 02FC C@ DUP FF = SWAP 3
  7 F AND 21 = OR
  8            IF 0 ELSE KEY THEN ;
  9 
 10 : ?CR 02FC C@ 3F AND 0C =  IF KE
 11 Y 0D = ELSE 0 THEN ;
 12  : MOVEOK ( WORM M -> FLAG   )
 13 
 14    TMASK + C@ SWAP .VAL AND 0= ;
 15 


Scr # 91 
  0  : DETRACT 0 4D C! ;
  1 
  2  : PAUSEP P" ." PAUSED: HIT ESC
  3    " ;
  4  : ?PAUSE  02FC C@ 1C = IF  PAUS
  5 EP KEY DROP
  6      BEGIN 02FC C@ FF = IF 0 ELS
  7 E KEY 3F AND 1B = THEN
  8      ?TERMINAL OR UNTIL PROMPT2
  9 THEN ;
 10  : TIMEOUT ( MOVE --> MOVE F )
 11 ?PAUSE
 12    W# ( DUP BLINK ) ?SPEED
 13 
 14    TRIGMASK + C@ PORTA C@ AND 0=
 15  ?NOTSP OR STOP OR ;  ;S


Scr # 92 
  0  ( SETTIME NXTMOVE CLRKBD   )
  1 
  2  0 VAR KEYPOT
  3 
  4  : SETTIME ( WORM )
  5 
  6    0 KEYPOT !
  7 
  8   0 21E ! FF 22C C! DUP .TMO
  9 
 10   21E !  DROP 2*W# >R
 11 
 12   R R + SCALE + C@
 13 
 14   R FRQT + !
 15 
?

Scr # 93 
  0   STO @ R> CDT + ! ;
  1 
  2  : NXTMOVE ( MOVE -> MOVE )
  3 
  4   NMOVE + C@ 5 MIN 0 MAX ;
  5 
  6  : CLRKBD FF 02FC C! ;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14    ;S
 15 


Scr # 94 
  0  : =OR ROT >R R = SWAP R> = OR ;
  1  ;S  ( CASES   )
  2  : CASES ?COMP CSP @ !CSP 4 ; IM
  3 MEDIATE
  4  : >OF 4 ?PAIRS COMPILE OVER COM
  5 PILE < COMPILE 0BRANCH
  6        HERE 0 , COMPILE DROP 5 ;
  7  IMMEDIATE
  8  : <OF 4 ?PAIRS COMPILE OVER COM
  9 PILE > COMPILE 0BRANCH
 10        HERE 0 , COMPILE DROP 5 ;
 11  IMMEDIATE
 12  : =OF 4 ?PAIRS COMPILE OVER COM
 13 PILE = COMPILE 0BRANCH
 14        HERE 0 , COMPILE DROP 5 ;
 15  IMMEDIATE


Scr # 95 
  0  : INOF 4 ?PAIRS COMPILE ROT COM
  1 PILE >R COMPILE R COMPILE >=
  2        COMPILE SWAP COMPILE R CO
  3 MPILE <= COMPILE AND
  4        COMPILE R> COMPILE SWAP C
  5 OMPILE 0BRANCH
  6        HERE 0 , COMPILE DROP 5 ;
  7  IMMEDIATE
  8  : ENDOF 5 ?PAIRS COMPILE BRANCH
  9  HERE 0 , SWAP 2 [COMPILE] THEN
 10        4 ; IMMEDIATE
 11 
 12  : ENDCASES 4 ?PAIRS COMPILE DRO
 13 P BEGIN SP@ CSP @ = 0= WHILE 2
 14     [COMPILE] THEN REPEAT CSP !
 15 ; IMMEDIATE ;S
?

Scr # 96 
  0  ( FIXL0 FIXL1 )
  1 
  2  : FIXL0  ( W# )
  3 
  4    DUP 40*  ( W# MASK )
  5 
  6    SWAP 5 * SCRMEM +
  7 
  8    DUP 5 + SWAP
  9 
 10    DO I C@ 3F AND OVER OR I C!
 11 
 12    LOOP DROP ;
 13 
 14  : FIXL1 ( W# )
 15 


Scr # 97 
  0    DUP 40* ( W# MASK )
  1 
  2    SWAP 5 * SCRMEM 28 + +
  3 
  4    DUP 5 + SWAP
  5 
  6    DO I C@ 3F AND OVER OR I C!
  7 
  8    LOOP DROP ;
  9 
 10  : FIXL2 ( W# ) 40* SCRMEM 78 +
 11 
 12    SCRMEM 50 + DO I C@ 3F AND
 13 
 14    OVER OR I C! LOOP DROP ;  ;S
 15 


Scr # 98 
  0  ( ADDONE )
  1 
  2  : ADDONE ( ADDR )
  3 
  4    >R BEGIN
  5 
  6     R C@ 3F AND DUP F 18 RANGE
  7 
  8       IF 1+ R C! 1 ELSE
  9 
 10    DUP  19 = IF DROP 10 R C! R>
 11 1- >R 0 ELSE
 12                 DROP 11 R C! 1 T
 13 HEN THEN
 14      UNTIL R> DROP ;
 15 
?

Scr # 99 
  0 
  1 
  2 
  3 
  4   ;S
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr # 100 
  0  (  KEYPOT GKEYPOT X! Y! XY! )
  1 
  2  0 VARIABLE TBUF 10 ALLOT 0 VAR
  3 CCNT
  4  HEX 0 VAR SEL ( SELECTED WORM )
  5 
  6  : HIL2 SEL @ FIXL2 ;
  7 
  8 : GKEYPOT (  -> N )
  9 
 10    ?SPACE KEYPOT +! KEYPOT @ ;
 11 
 12 : PROMPTM P" ." PADDLE/SPACE&RET
 13 URN"  ;
 14 : BMPCNT DUP CCNT @ 3 > IF 7E EM
 15 IT EMIT


Scr # 101 
  0  ELSE 1 CCNT +! EMIT THEN  CCNT
  1 @ 1- TBUF + C! ;
  2 : GTBUF 0 CCNT ! BEGIN KEY DUP
  3 
  4   30 61 RANGE IF BMPCNT HIL2 0 E
  5 LSE DUP
  6   61 7A RANGE IF 20 - BMPCNT HIL
  7 2 0 ELSE DUP
  8   7E = IF EMIT CCNT @ 1 - 0 MAX
  9 CCNT ! 0 ELSE DUP
 10   D =  IF DROP 1 ELSE
 11 
 12   DROP 0  10 10 BUZZ  THEN THEN
 13 THEN THEN
 14   UNTIL ;  ;S
 15 
?

Scr # 102 
  0  ( LEGAL CHKMOVES      )
  1 
  2  0 VAR LEGAL 4 ALLOT
  3 
  4  0 VAR #LEGAL
  5 
  6  HERE  1 C, 2 C, 4 C,
  7 
  8  8 C, 10 C, 20 C, <-> MMASK
  9 
 10 
 11 
 12  : CHKMOVES ( WORM )
 13 
 14   0 #LEGAL !
 15 


Scr # 103 
  0   [.VAL] 6 0 DO
  1 
  2   DUP I MMASK + C@ AND 0= IF
  3 
  4   #LEGAL @ LEGAL + I SWAP C!
  5 
  6   1 #LEGAL +! ENDIF
  7 
  8   LOOP DROP ;
  9 
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 104 
  0  ( GPOT ) HEX
  1 
  2   : GPOT ( WORM --> INDX )
  3 
  4     .WRM#  DUP POT0 + C@ MAXPOT
  5 = IF DROP GKEYPOT ELSE
  6       CPOT + C@ E6 SWAP -
  7 
  8       E6 #LEGAL @ 2 * /
  9 
 10       /  GKEYPOT + THEN
 11 
 12     #LEGAL @ 1 MAX MOD
 13 
 14     LEGAL + C@  0 MAX 5 MIN ;
 15 
?

Scr # 105 
  0   : TRIGCLR ( MV WORM - MOVE )
  1 
  2      >R W# TRIGMASK + C@
  3 
  4     BEGIN DUP PORTA C@ AND
  5 
  6     R DUP GPOT !CRIX R UPDMV
  7 
  8     W# DUP + MAPCDT + >R
  9 
 10     R C@ 0= IF 7 R C! ENDIF R>
 11 
 12     DROP UNTIL
 13 
 14     DROP DROP R> .CRIX ; ;S
 15 


Scr # 106 
  0  ( PEEKMAP HOME? SAMEDIR? )
  1 
  2  : XY->V #H * + WDATA + C@ ;
  3 
  4  : PEEKMAP ( W M -> COUNT ) 2DUP
  5 
  6   SWAP >R 2 * R GXINC + @ R>
  7 
  8    .XPOS + [X]   ROT ROT
  9 
 10   SWAP >R 2 * YINC + @ R> .YPOS
 11 
 12    + [Y]
 13 
 14   XY->V #BITS ;
 15 


Scr # 107 
  0  : HOME? ( W M --> F )
  1 
  2   DROP DROP 0 ( NOT IMPL. ) ;
  3 
  4  : SAMEDIR? ( W M --> NO/?/YES )
  5 
  6   SWAP [.VAL] DUP #BITS 1 = IF
  7 
  8    SWAP NXTMOVE TMASK + C@ = 2 *
  9 
 10   ELSE SWAP NXTMOVE TMASK + C@
 11 
 12    AND IF 1 ELSE 0 ENDIF ENDIF ;
 13 
 14  ;S
 15 
?

Scr # 108 
  0  ( EVAL )
  1 
  2  HERE 5 C, 7 C, 7 C,
  3 
  4  9 C, B C, 2 C, <-> SIX
  5 
  6  HERE 5 C, 7 C, 7 C,
  7 
  8  9 C, 5 C, 2 C, <-> VALFN
  9 
 10  : EVAL ( W M --> )
 11 
 12  OVER .VAL OVER TMASK + C@
 13 
 14  AND IF SIX + 0 SWAP C! DROP
 15 


Scr # 109 
  0  ELSE ( W LEGALMOVE )
  1 
  2   2DUP PEEKMAP VALFN + C@ >R
  3 
  4   2DUP HOME? R> + >R
  5 
  6   SWAP OVER SAMEDIR? R> SWAP -
  7 
  8   SWAP SIX + C!
  9 
 10   ENDIF ;
 11 
 12 
 13 
 14  ;S
 15 


Scr # 110 
  0 ( DOAI )
  1 
  2  : CK6 ( W --> )
  3 
  4  6 0 DO DUP I EVAL LOOP DROP ;
  5 
  6  0 VAR TEMP
  7 
  8  : 6T SIX + C@ TEMP @ ;
  9 
 10  : PICKBEST ( --> M ) 0 TEMP !
 11 
 12   6 0 DO
 13 
 14    I 6T MAX TEMP ! LOOP  0
 15 
?

Scr # 111 
  0   6 0 DO I 6T = IF 1+ ENDIF
  1 
  2    LOOP   RAND SWAP MOD 1+
  3 
  4   6 0 DO I 6T = IF 1 - -DUP
  5 
  6    0= IF I LEAVE ENDIF ENDIF
  7 
  8    LOOP ;
  9 
 10  : DOAI ( W --> M )
 11 
 12   ( 300 0 DO I DROP LOOP )
 13 
 14   CK6 PICKBEST ;   ;S
 15 


Scr # 112 
  0  ( DOS EMULATION )
  1 
  2   1 VAR CMDOK : CHKST CMDOK @ st
  3 at @ 1 = AND CMDOK ! ;
  4   168 CONSTANT VTOC#  80 CONSTAN
  5 T SECSZ
  6   0 VARIABLE FBUF SECSZ ALLOT
  7 
  8   0 VARIABLE VTOC SECSZ ALLOT 0
  9 VARIABLE DBUF SECSZ ALLOT
 10  169 CONSTANT DIR# 0 VARIABLE FI
 11 LE#
 12  : RDSEC ( READ DOS SEC: BUF SEC
 13 # --> )
 14    1- 1 1 R/W-SECS CHKST ;
 15 


Scr # 113 
  0  : WDSEC ( BUF SEC# )
  1 
  2    1- 1 0 R/W-SECS CHKST ;
  3 
  4  : RVTOC VTOC VTOC# RDSEC ;
  5 
  6  : WVTOC VTOC VTOC# WDSEC ;
  7 
  8  : RDIRSEC ( N ) DBUF SWAP DIR#
  9 + RDSEC ;
 10  : WDIRSEC ( N ) DBUF SWAP DIR#
 11 + WDSEC ;
 12  : VDOSDISK RVTOC VTOC 1+ @ 2C3
 13 = DUP IF ELSE 0 CMDOK ! THEN ;
 14  ;S
 15 
?

Scr # 114 
  0  : GETNEWMOVE DUP 7 !CRIX CLRKBD
  1 
  2   XSND DUP SETTIME 2*W#
  3 
  4  >R DUP UPDCRLOC
  5 
  6  DUP CHKMOVES  1 PSCAN C!
  7 
  8  DUP UPDMAP
  9 
 10  6 BEGIN DROP DUP GPOT
 11 
 12  OVER .CRIX OVER = IF ELSE
 13 
 14  2DUP !CRIX
 15 


Scr # 115 
  0  OVER UPDMV  ENDIF R MAPCDT +
  1 
  2  C@ 0= IF 7 MAPCDT R + ! ENDIF
  3 
  4  TIMEOUT UNTIL OVER TRIGCLR
  5 
  6  0 COLBK C! DETRACT [MOVE]
  7 
  8   SWAP OVER SWAP
  9 
 10  DUP [.VAL] ROT !MOVE 0 PSCAN C!
 11 
 12  1 VBION ! R> DROP ; ;S
 13 
 14 
 15 


Scr # 116 
  0  ( HILITE DELITE          )
  1 
  2  HERE  38 C, 60 C, 88 C, B0 C, <
  3 -> MHP
  4  : MVHILTE ( WORM ) 2E DMACTL C!
  5  3 GRACTL C!
  6   FF PMA 1F2 + C! .WRM# DUP MHP
  7 + 4 0 DO DUP C@ I 6 * + D004
  8    I + C! LOOP DROP FF D00C C! (
  9  PROMPTM ) FIXL2 ;
 10  : MVDELITE (  ) 2A DMACTL C! 2
 11 GRACTL C!
 12   00 PMA 1F2 + C! 4 0 DO 0 D004
 13 I + C! LOOP PROMPT2 ;
 14  : HILITE ( WORM )
 15 
?

Scr # 117 
  0  .WRM# DUP COLPF0 + SWAP
  1 
  2   COLPFT + C@  F0 AND 8 OR SWAP
  3 C! ;
  4  : DELITE (    )
  5 
  6   4 0 DO COLPFT I + C@ F0
  7 
  8  AND 4 OR COLPF0 I +
  9 
 10  C! LOOP ;
 11 
 12  : XLITE ( ALL COLORS OFF )
 13 
 14  4 0 DO 0 COLPF0 I + C! LOOP ; ;
 15 S


Scr # 118 
  0  (  GETMOVE   )
  1 
  2  : GETMOVE ( WORM -> MOVE )
  3 
  4    DUP [.VAL] OVER SWAP .MOVE
  5 
  6    DUP
  7 
  8    6 <  IF ELSE DUP ( W M )
  9 
 10    GETNEW# = IF DROP DUP HILITE
 11 DUP MVHILTE
 12           DUP GETNEWMOVE MVDELIT
 13 E DELITE ELSE DUP
 14    DOAI#   = IF DROP DUP DOAI
 15 


Scr # 119 
  0            >R DUP DUP [.VAL] R !
  1 MOVE R> ELSE DUP
  2    DIE#    = IF DROP DUP UPDSTAT
  3 US UNDFMOVE ELSE
  4   (  ." ????? " S.  )
  5 
  6    THEN THEN THEN THEN SWAP DROP
  7  ;
  8  ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 
?

Scr # 120 
  0  ( INC#MOVES NXTMOVE UPDXPOS )
  1 
  2  : INC#MOVES ( WORM )
  3 
  4   DUP 4 + @ 1+
  5 
  6           SWAP 4 + ! ;
  7 
  8  : UPDXPOS ( WORM MOVE )
  9 
 10   SWAP >R 2* R GXINC + @ R
 11 
 12   .XPOS + [X] R> SWAP !XPOS ;
 13 
 14  : UPDYPOS ( WORM MOVE )
 15 


Scr # 121 
  0   SWAP >R 2* YINC + @ R .YPOS
  1 
  2   + [Y] R> SWAP !YPOS ;
  3 
  4  0 VAR WSCR 6 ALLOT
  5 
  6  : UPDSCR ( WORM )
  7 
  8   .WRM# DUP 5 * 3 + SCRMEM +
  9 
 10    ADDONE DUP  FIXL0 DUP +
 11 
 12    WSCR + 1 SWAP +! ;
 13 
 14  ;S
 15 


Scr # 122 
  0  ( UPDCNODE INSTALLVBI INSTALLHB
  1 I INITMEM   )
  2  : UPDCNODE ( WORM MOVE )
  3 
  4    2DUP !CRIX
  5 
  6    OVER .VAL SWAP TMASK + C@
  7 
  8    OR DUP 3F AND 3F = IF
  9 
 10    OVER 8 !CRIX OVER UPDSCR
 11 
 12    ENDIF !VAL ;
 13 
 14  : INSTALLVBI ( ADDR -> )
 15 
?

Scr # 123 
  0    7 SET-INT  ;
  1 
  2  : INSTALLHBI ( ADDR -> )
  3 
  4   40 D40E C! 200 ! C0 D40E C! ;
  5 
  6  : INITMEM DLH @ [ ' SAVDLH ] LI
  7 TERAL !
  8             58 @ [ ' SCRMEM ] LI
  9 TERAL !
 10    SCRMEM 50 + WDL 41 + ! SCRMEM
 11  WDL 46 + !
 12    SCRMEM 28 + WDL 4B + ! ;
 13 
 14  ;S
 15 


Scr # 124 
  0  (          MAKEMOVE       )
  1 
  2  : MAKEMOVE ( WORM -> STATUS )
  3 
  4  DUP UPDSTATUS  DUP .STATUS
  5 
  6   IF  DUP GETMOVE
  7 
  8    DUP 6 < IF  OVER ZMAP
  9 
 10  OVER UPDCRLOC
 11 
 12  2DUP MSND 2DUP UPDCNODE
 13 
 14  OVER UPDMV OVER UPDMAP
 15 


Scr # 125 
  0  ( OVER PAUSE ) OVER UPDCOL
  1 
  2  2DUP UPDXPOS 2DUP UPDYPOS
  3 
  4  OVER UPDLOC OVER UPDCOL
  5 
  6  ( OVER ZCRMAP OVER UPDCRLOC )
  7 
  8  ( OVER INC#MOVES ) 2DUP NXTMOVE
  9 
 10  UPDCNODE OVER UPDSTATUS
 11 
 12  ENDIF DROP ENDIF DUP UPDSTATUS
 13 
 14  .STATUS ; ;S
 15 
?

Scr # 126 
  0  ( GAME  ENDGAME  CSOUND    )
  1 
  2  0 VARIABLE MVCNT 4 VAR WTICKS
  3 
  4  4 VARIABLE PERIOD
  5 
  6  : SETW# DUP ' W# ! DUP + ' 2*W#
  7  ! ;
  8  : GAME ( #PLAYERS )
  9 
 10   1 VBION ! 0 QFLG !
 11 
 12   DUP 0 DO I GWORM UPDCRLOC LOOP
 13 
 14   BEGIN 0 OVER 0 DO ( XSND ) ?PA
 15 USE I SETW#


Scr # 127 
  0 BEGIN I DUP + CDT + C@ 0= UNTIL
  1 
  2    I GWORM MAKEMOVE + LOOP ?SPEE
  3 D
  4    ( DUP 1+ DEN @ * STO ! )  0=
  5 
  6    CONT 0= OR
  7 
  8  UNTIL DROP XSND ( 0 VBION ! ) ;
  9 
 10  : CLEARPM  (  )  280 0
 11 
 12   DO 0 PMA 180 + I + C! LOOP ;
 13 
 14  ;S
 15 


Scr # 128 
  0  ( DUMMY SCRLON SCRLOFF FIXDUMMY
  1  )
  2 
  3 
  4 : DUMMY ."      WELCOME TO ... W
  5 ORMS?    COPYRIGHT (C) 1983 DAVI
  6 D S. MAYNARD  FROM ELECTRONIC AR
  7 TS PRESS START TO CONTINUE    WE
  8 LCOME TO ... WORMS?"
  9 
 10   ;
 11 
 12    ' DUMMY 3 + VAR FSADD
 13 
 14   FSADD @  ' DUMMY 2 + C@ + 1A -
 15  VAR LSADD
?

Scr # 129 
  0 07 VAR CURSCROLL 0 VAR SADD 1 VA
  1 R SCRLFLAG
  2 : FIXDUMMY LSADD @ 1A +  FSADD @
  3 
  4        DO I C@ 20 - I C! LOOP ;
  5 
  6 : SCRLON 0 SCRLFLAG C! 56 WDL 40
  7  + C! FSADD @ WDL 41 + ! ;
  8 : SCRLOFF 1 SCRLFLAG C! 46 WDL 4
  9 0 + C! SCRMEM 50 + WDL 41 + ! ;
 10 
 11 
 12 
 13 
 14  ;S
 15 


Scr # 130 
  0  ( PSCORE  SCORE2         )
  1 
  2  1E6 VAR FTIME 0 VAR WTIME
  3 
  4  : SCORE2 ( #PLAYERS )
  5 
  6  0 OVER 0 DO I GWORM .WRM#
  7 
  8  DUP + WSCR + @ + LOOP
  9 
 10  FTIME @ SWAP / WTIME !  ANONB @
 11  >R ANON
 12  0 DO XLITE I GWORM DUP HILITE
 13 
 14  0 220 ! FF 22E C! .WRM# DUP +
 15 


Scr # 131 
  0  WSCR + @ WTIME @ * -DUP
  1 
  2  IF 20 MAX  220 !  BEGIN
  3 
  4  22E C@ 0= ?START OR  UNTIL
  5 
  6  ENDIF
  7 
  8  LOOP R> 0= IF ANOFF THEN
  9 
 10  DELITE XSND  ;
 11 
 12 
 13 
 14  ;S
 15 
?

Scr # 132 
  0  ( PLAYGAME  DELAY INITSTAT )
  1 
  2  : INITSTAT DUP .KIND
  3 
  4   IF 1 ELSE 0 ENDIF !STATUS ;
  5 
  6  : PLAYGAME
  7 
  8   0 D208 C! 3 D20F C! ( INIT SOU
  9 ND )
 10    CLEARF  CLEARPM ( WDISPLAY )
 11 
 12   #WORMS @ 0 DO I GWORM DUP
 13 
 14   INITPOS ( DUP INITMOVES )
 15 


Scr # 133 
  0   INITSTAT LOOP
  1 
  2   #WORMS @ DUP GAME
  3 
  4   CONT IF SCORE2 ELSE DROP THEN
  5 CLRKBD  ;
  6 
  7 
  8 
  9 
 10 
 11 
 12  ;S
 13 
 14 
 15 


Scr # 134 
  0  (  !NMOFE BANDOMIZE INCTALL )
  1 
  2 : !NMOVE ( WORM MOVE INDEX -> F)
  3 
  4   3E MIN
  5 
  6   OVER TMASK + C@ OVER AND IF
  7 
  8   DROP
  9 
 10   DROP DROP 0 ELSE SWAP !MOVE 1
 11 
 12   ENDIF ;
 13 
 14  : RANDOMIZE ( WORM )
 15 
?

Scr # 135 
  0   3F 0 DO
  1 
  2   BEGIN DUP RAND 7 AND 5 MIN
  3 
  4   I !NMOVE UNTIL LOOP
  5 
  6   DROP ;
  7 
  8  : WLDISPLAY
  9 
 10   16 0 DO 0 I SCRMEM + C! LOOP
 11 
 12   8 0 DO 0 I WSCR + ! 2 +LOOP ;
 13 
 14  : IDISPLAY CLEARPM CLEARF ( WDI
 15 SPLAY ) ( LOGO ) ;  ;S


Scr # 136 
  0 ( WORM I/O )
  1 
  2  0 <-> DED 1 <-> NEW 2 <-> AUTO
  3 3 <-> WILD
  4  4 <-> SAME 5 <-> NAMED
  5 
  6  : VMOVE ( I MOVE --> MOVE )
  7 
  8    DUP   (  I  M )
  9 
 10    6 < IF SWAP OVER TMASK + C@ A
 11 ND IF DROP GETNEW# THEN ELSE
 12    DUP GETNEW# = IF SWAP DROP EL
 13 SE DUP
 14    DOAI#   = IF SWAP DROP ELSE D
 15 UP


Scr # 137 
  0    DIE#    = IF SWAP DROP ELSE
  1 
  2            DROP GETNEW# SWAP DRO
  3 P THEN THEN THEN THEN ;
  4  : RWORM ( WORM --> )
  5 
  6    >R R 4 !KIND R 4 0 DO DUP I T
  7 BUF + C@ SWAP .NAME I + C! LOOP
  8   40 0 DO DUP I FBUF I + C@ VMOV
  9 E I SWAP !MOVE LOOP DROP
 10   R> DROP ;
 11 
 12  : WWORM ( WORM )
 13 
 14   40 0 DO DUP I .MOVE FBUF I + C
 15 ! LOOP DROP ;  ;S
?

Scr # 138 
  0  ( INTROGAME  )
  1 
  2 
  3 
  4  : INTROGAME
  5 
  6    CLEARPM CLEARF ( LFIELD )
  7 
  8   #WORMS @ 0 DO I GWORM DUP
  9 
 10   CONT IF  RAND 3 AND IF
 11 
 12    DUP 3 !KIND DUP INITMOVES DUP
 13  RANDOMIZE
 14    ELSE DUP 2 !KIND DUP INITAUTO
 15  THEN


Scr # 139 
  0   ELSE
  1 
  2      DUP 0 !KIND ENDIF
  3 
  4   INITPOS ( DUP INITMOVES )
  5 
  6   DUP ZMAP INITSTAT
  7 
  8   LOOP CONT IF WLDISPLAY
  9 
 10   #WORMS @ DUP GAME SCRLOFF PROM
 11 PT2 SCORE2  ENDIF
 12   #WORMS @ 0 DO I GWORM 0 !SCORE
 13 
 14    LOOP  ; ;S
 15 


Scr # 140 
  0  ( SUMO  INITIALIZATION )
  1 
  2   0 VAR CSBUILT
  3 
  4  : SUMO  ( INITIALIZE WORLD )
  5 
  6   0 COLBK C! DELITE ( WDL SETHSC
  7 RL  )
  8   CSBUILT @ IF ELSE CLEARF
  9 
 10   WCHSET BUILDCHSET
 11 
 12   1 CSBUILT ! ENDIF
 13 
 14   0 QFLG !
 15 
?

Scr # 141 
  0   ?TERMINAL 0= IF
  1 
  2   BEGIN ( LOGO ) INTROGAME SCRLO
  3 FF
  4   STOP UNTIL ENDIF
  5 
  6   WLDISPLAY  FF 02FC C!
  7 
  8 0 GWORM 1 !KIND 1 GWORM 2 !KIND
  9 
 10 2 GWORM 3 !KIND 3 GWORM 0 !KIND
 11  ; ;S
 12 
 13 
 14 
 15 


Scr # 142 
  0  ( SEL ILINE DELINE     )
  1 
  2  : FIXLIN ( W# -> )
  3 
  4    DUP FIXL0 FIXL1 ;
  5 
  6 
  7 
  8  : HILINE  ( -> )
  9 
 10   SEL @ COLPF0 + DUP C@ F0 AND
 11 
 12   A OR SWAP C! HIL2 ;
 13 
 14  : DELINE ( -> )
 15 


Scr # 143 
  0   SEL @ COLPF0 + DUP C@ F0 AND
  1 
  2   4 OR SWAP C! ;
  3 
  4  : FIXCOL ( -> )
  5 
  6   4 0 DO COLPFT I + C@ COLPF0 I
  7 
  8          + C! LOOP ;
  9 
 10 ;S
 11 
 12 
 13 
 14 
 15 
?

Scr # 144 
  0 ( COMMAND SHELL SUPPORT HBI1 FXH
  1 BI )  HEX
  2 : CINC ( MAX VAL -> NEWVAL)
  3 
  4   1+ SWAP OVER = IF DROP 0
  5 
  6  ENDIF ;
  7 
  8 
  9 
 10  CODE HBI1 PHA,
 11 
 12    2 # LDA, WSYNC STA,
 13 
 14    D01A STA, ( BKGRND LUM )
 15 


Scr # 145 
  0    CURSCROLL LDA, HSCROL STA,
  1 
  2    E0 # LDA,  CHBASE STA,
  3 
  4    PLA, RTI, END-CODE
  5 
  6 ( : FXHBI ' HBI1 INSTALLHBI  ;
  7  )
  8  4153 VARIABLE SAMEN 4D C, 45 C,
  9 
 10  : NAMESAME ( W ) .NAME DUP 8 BL
 11 ANKS SAMEN SWAP 4 CMOVE ;
 12 ;S
 13 
 14 
 15 


Scr # 146 
  0 ( APPLY OPTIONC )
  1 
  2 ( : DOMAN INITMOVES SFIELD ; )
  3 
  4 : DONEW DUP NAMESAME INITMOVES ;
  5 
  6 : DOAUTO DUP NAMESAME INITAUTO ;
  7 
  8 : DOWILD DUP NAMESAME RANDOMIZE
  9 ;
 10 : VDOKIND DROP DONEW DOAUTO DOWI
 11 LD DROP DROP ;
 12 : DOKIND 5 MIN DUP + ' VDOKIND +
 13  @ EXECUTE ;
 14  : SETOPTS WLDISPLAY
 15 
?

Scr # 147 
  0   ( LFIELD  )
  1 
  2    #WORMS @ 0 DO I GWORM
  3 
  4  DUP .KIND DOKIND LOOP ;
  5 
  6 
  7 
  8  ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr # 148 
  0 ( COMMAND SHELL WORM OUTPUT )
  1 
  2 : TDED    ."  ----" ;
  3 
  4 : TNEW    ."  NEW " ;
  5 
  6 : TMYST   ."  WILD" ;
  7 
  8 : TOLD    ."  SAME" ;
  9 
 10 : TSMART  ."  AUTO" ;
 11 
 12 : CURW SEL @ GWORM ;
 13 
 14 : TNAMED 20 EMIT
 15 


Scr # 149 
  0     CURW 4 0 DO DUP .NAME I + C@
  1  EMIT LOOP DROP ;
  2 : VKINDCASE  TDED TNEW  TSMART T
  3 MYST  TNAMED NOOP ;
  4 : KINDCASE  DUP + ' VKINDCASE +
  5 @ EXECUTE ;
  6 : TYKIND DUP 5 * 1 XY! DUP GWORM
  7 
  8   .KIND KINDCASE FIXL1 ;
  9 
 10  ;S
 11 
 12 
 13 
 14 
 15 
?

Scr # 150 
  0 ( WOPTION WSELECT NOP SHOWALL PR
  1 OMPT HI LO )
  2 : PROMPT P" ."  SELECT/OPTION/ST
  3 ART"  HILINE ;
  4 : WOPTION 5 CURW .KIND CINC
  5 
  6   CURW SWAP !KIND
  7 
  8   SEL @ TYKIND
  9 
 10   SEL @ FIXL1  PROMPT ;
 11 
 12 : WSELECT DELINE
 13 
 14   1 SEL +! SEL @
 15 


Scr # 151 
  0   MAX#W  = IF 0 SEL !
  1 
  2    ENDIF PROMPT ;
  3 
  4 : NOP ;
  5 
  6 : SHOWALL SEL @  MAX#W 0 DO I SE
  7 L !
  8  I TYKIND LOOP SEL ! HILINE ;
  9 
 10 : DROPKEY 02FC C@ FF = IF ELSE K
 11 EY DROP THEN ;
 12 : HI hi ;  : LO lo ;
 13 
 14  ;S
 15 


Scr # 152 
  0  ( DOS EMULATION 2 )
  1 
  2   8040 VARIABLE VBITMASK 20 C, 1
  3 0 C, 08 C, 04 C, 02 C, 01 C,
  4  : SECFREE? ( SEC# )
  5 
  6    8 /MOD A +  VTOC + C@ SWAP VB
  7 ITMASK + C@ AND ;
  8  : MARKSEC ( SEC# ) 8 /MOD A + V
  9 TOC + >R R C@
 10          SWAP VBITMASK + C@ XOR
 11 R> C! -1 VTOC 3 + +! ;
 12  FF VARIABLE MATCHFLAG
 13 
 14  : MATCH ( PTR-STR PTRDIR --> PT
 15 RDIR FLAG )
?

Scr # 153 
  0   FF MATCHFLAG !
  1 
  2  0B 0 DO 2DUP I + 5 + C@ SWAP I
  3 + C@ =
  4          MATCHFLAG @ AND MATCHFL
  5 AG ! LOOP
  6      MATCHFLAG @ IF SWAP DROP 1
  7  ELSE 2DROP 0 THEN ;
  8  0 VAR DSTATE
  9 
 10  : DOFF 022F C@ DSTATE C! 0 022F
 11  C!  0 D400 C!
 12   5 0 DO 0 D00D I + C! LOOP 0 D0
 13 1D C! ;
 14  : DON C0 D40E C!  DSTATE C@ 022
 15 F C! 3 D01D C!  ; ;S


Scr # 154 
  0  ( DOS EMULATION 2 )
  1 
  2   FF VARIABLE LASTDIRSEC
  3 
  4  : DENTVALID ( PTR ) C@ 40 AND ;
  5 
  6  : GDIR ( F# --> PTR  ) 8 /MOD
  7 
  8     DUP LASTDIRSEC @ = IF DROP E
  9 LSE
 10     DUP RDIRSEC LASTDIRSEC ! THE
 11 N  10 * DBUF + ;
 12 
 13 
 14 
 15 


Scr # 155 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 ;S
 15 
?

Scr # 156 
  0  ( DOS EMULATION 4 )
  1 
  2   0 VARIABLE F#
  3 
  4  : FIXTBUF
  5 
  6      57 TBUF 8 + C! 52 TBUF 9 +
  7 C! 4D TBUF A + C!  ;
  8  : TBUFINIT B 0 DO 20  TBUF I +
  9 C! LOOP ;
 10  : GNAME P" PROMPT2  P" DON
 11 
 12    ."  FILE NAME:"  HIL2 TBUFINI
 13 T GTBUF FIXTBUF DOFF ;
 14  : MNAME (  --> FLG & PTR ) 0
 15 


Scr # 157 
  0    40 0 DO TBUF I GDIR MATCH IF
  1 SWAP DROP 1  I F# ! LEAVE THEN
  2               LOOP ;
  3 
  4  : GNF# ( GETNEW FILE #: -> FLAG
  5  AND SECTOR )
  6    FF  LASTDIRSEC !  FF
  7 
  8    40 0 DO I GDIR  DENTVALID 0=
  9 IF DROP I I F# ! LEAVE THEN
 10         LOOP DUP FF = IF DROP 0
 11 ELSE 1 THEN ;
 12  : NOK ( NAMEOK ) 0 4 0 DO 20 TB
 13 UF I + C@ = 0= OR LOOP ; ;S
 14 
 15 


Scr # 158 
  0  ( DOS EMULATION F#PTR PTRF# )
  1 
  2  : READF  DOFF 1 CMDOK !
  3 
  4      VDOSDISK (  FXHBI ) IF
  5 
  6      GNAME NOK IF  MNAME IF ( DU
  7 P PDENTRY ) 3 + @
  8      FBUF SWAP RDSEC ELSE
  9 
 10       P" ."  FILE NOT FOUND
 11 " 0 CMDOK ! THEN THEN
 12     ELSE P" ."  INSERT A DOS DIS
 13 K   "  THEN DON ;
 14  : WRITEOF ( PTR --> )
 15 
?

Scr # 159 
  0    ( DUP PDENTRY ) 3 + @ FBUF SW
  1 AP WDSEC ;
  2  : UPDDIR LASTDIRSEC @ WDIRSEC ;
  3 
  4 
  5 
  6  : PTRF# ( PTR -> F# )
  7 
  8     DBUF - 10 / ;
  9 
 10  : F#PTR ( F# -> PTR ) 7 AND
 11 
 12     10 * DBUF + ;
 13 
 14 ;S
 15 


Scr # 160 
  0  ( DOS EMULATION )
  1 
  2 : ALLOCSEC ( --> SEC# FLAG )
  3 
  4  0 720 1 DO I SECFREE? IF DROP I
  5  1 LEAVE THEN LOOP ;
  6 : COPYNAME ( PTR )
  7 
  8    0B 0 DO DUP TBUF I + C@ SWAP
  9 I +  5 + C! LOOP
 10    DROP ;
 11 
 12 : WRITENF ( PTR --> )
 13 
 14   >R ALLOCSEC IF 40 R C! 1 R 1+
 15 ! ( COUNT )  DUP MARKSEC WVTOC


Scr # 161 
  0    R 3 + ! ( SSN ) R COPYNAME  R
  1  3 + @ FBUF SWAP WDSEC UPDDIR
  2    ELSE P" ."  NO ROOM ON DISK
  3   " 0 CMDOK ! THEN R> DROP  ;
  4  : FIXFBUF
  5 
  6     F# @ 4 * FBUF 7D + C! 0 FBUF
  7  7E + C! ( LINK )
  8     7D FBUF 7F + C! ( BYTE COUNT
  9  ) ;
 10 
 11 
 12 
 13 
 14 ;S
 15 
?

Scr # 162 
  0  ( DOS EMULATION WRITEF )
  1 
  2  : WRITEF DOFF 1 CMDOK !
  3 
  4     VDOSDISK (  FXHBI ) IF
  5 
  6      GNAME NOK IF MNAME IF FIXFB
  7 UF WRITEOF
  8        ELSE
  9 
 10         GNF# IF F#PTR FIXFBUF  W
 11 RITENF
 12         ELSE P" ."  DIRECTORY FU
 13 LL       " 0 CMDOK ! THEN
 14        THEN THEN
 15 


Scr # 163 
  0     ELSE P" ."  INSERT A DOS DIS
  1 K  "  THEN DON ;
  2  : SAVEF 1 CMDOK !
  3 
  4      DOFF VDOSDISK ( FXHBI ) IF
  5 MNAME IF FIXFBUF WRITEOF
  6      ELSE GNF# IF F#PTR FIXFBUF
  7 WRITENF
  8        ELSE P" ."  DIRECTORY FUL
  9 L"  0 CMDOK ! THEN
 10      THEN ELSE P" ."  INSERT A D
 11 OS DISK    " THEN DON ;
 12 
 13 
 14  ;S
 15 


Scr # 164 
  0  ( WRPWDL BMPWDL NWORM FINCMD DO
  1 READ )
  2  CODE WRPWDL WDL 41 + LDA, LSADD
  3  CMP, 0= IF, WDL 42 + LDA,
  4         LSADD 1+ CMP, 0= IF, FSA
  5 DD LDA, WDL 41 + STA, FSADD 1+
  6         LDA, WDL 42 + STA, THEN,
  7  THEN, CLC, RTS, END-CODE
  8  CODE BMPWDL CLC, WDL 41 + LDA,
  9 1 # ADC, WDL 41 + STA, CS IF,
 10       0 # LDA, WDL 42 + ADC, WDL
 11  42 + STA, THEN, ' WRPWDL JSR,
 12       CLC, RTS,  END-CODE
 13 
 14  : NWORM ( W )
 15 
?

Scr # 165 
  0    4 0 DO DUP .NAME I + TBUF I +
  1  C@ SWAP C! LOOP
  2      4 !KIND ;
  3 
  4 : FINCMD CMDOK @ IF PROMPT ELSE
  5 stat @ DUP 1 = IF DROP ELSE
  6     P" PROMPT2 P" ."  DISK ERROR
  7 : " . THEN THEN ;
  8 : DOREAD P" ."  LOAD? <RETURN>
  9     "  HIL2 CNFRM
 10    IF READF CMDOK @ IF CURW RWOR
 11 M THEN THEN FINCMD ;
 12 : DO? P" ."  LOAD/SAVE/UPDT/DIR
 13  " HIL2 ;
 14  ;S
 15 


Scr # 166 
  0  ( COMMANDS )
  1 
  2  WDATA VAR SCRPOS
  3 
  4 : WRMENT ( PTR --> FLAG )
  5 
  6   >R R C@ 40 AND 40 = R D + C@ 5
  7 7 = AND
  8    R E + C@ 52 = AND R> F + C@ 4
  9 D = AND ;
 10 : WEMIT ( CHR )
 11 
 12   20 - SCRPOS @ C! 1 SCRPOS +! ;
 13 
 14 : PWENTRY ( PTR )
 15 


Scr # 167 
  0   20 WEMIT 9 5 DO DUP I + C@ WEM
  1 IT LOOP DROP ;
  2 : PDIR WDATA SCRPOS ! FF LASTDIR
  3 SEC !  1 CMDOK C!
  4   VDOSDISK IF DOFF 40 0 DO I GDI
  5 R DUP WRMENT
  6    IF PWENTRY ELSE DROP (  0 CMD
  7 OK C! ) THEN LOOP  DON
  8   ELSE P" ."  INSERT DOS DISK
  9 " 0 CMDOK ! THEN ;
 10 : DODIR P" ."  DIRECTORY? <RETUR
 11 N> " HIL2  CNFRM IF CLEARF
 12   CLEARPM E0 CHNOW C! F SCRLVAL
 13 C! 2 WAIT  PDIR CMDOK @
 14    IF P"  PROMPT2 THEN  THEN FIN
 15 CMD ; ;S
?

Scr # 168 
  0  ( COMMANDS: DOWRITE SNAME DOSAV
  1 E ? CMD )
  2 : DOWRITE P" ."  SAVE? <RETURN>
  3       " HIL2
  4     CNFRM IF CURW WWORM WRITEF C
  5 MDOK @ IF CURW NWORM THEN THEN
  6     FINCMD ;
  7 
  8 : SNAME  TBUFINIT CURW 4 0 DO DU
  9 P .NAME I + C@
 10          TBUF I + C! LOOP DROP
 11 FIXTBUF ;
 12 : DOSAVE P" ."  UPDATE" TNAMED .
 13 " ?<RET.>  " HIL2
 14     CNFRM IF SNAME CURW WWORM SA
 15 VEF THEN  FINCMD ;


Scr # 169 
  0 : ?CMD ?SPEED 02FC C@ FF = IF EL
  1 SE KEY DUP
  2   4C 6C =OR IF DOREAD ELSE DUP
  3 
  4   53 73 =OR IF DOWRITE ELSE DUP
  5 
  6   55 75 =OR IF DOSAVE ELSE DUP
  7 
  8   47 67 =OR IF GCMD ELSE DUP
  9 
 10   3F 2F =OR IF DO? ELSE DUP
 11 
 12   44 64 =OR IF DODIR  THEN THEN
 13 THEN THEN THEN THEN DROP
 14   ( FXHBI ) SHOWALL THEN ; ;S
 15 


Scr # 170 
  0  ( MAIN LOOP )
  1 
  2 : WSTART SETOPTS ( WLDISPLAY ) F
  3 IXCOL WCHSETH CHNOW C!
  4   C SCRLVAL C! PROMPT2 PLAYGAME
  5  SHOWALL
  6   PROMPT FF 02FC C!   ;
  7 
  8 : VTERMCHOICE NOP  WSTART WSELEC
  9 T NOP WOPTION ;
 10 : TERMCHOICE 4 MIN DUP + ' VTERM
 11 CHOICE + @ EXECUTE ;
 12 : ?WAITTERM
 13 
 14  BEGIN ?START -DUP ?CMD UNTIL ;
 15 
?

Scr # 171 
  0 : ?NOTERM BEGIN ?TERMINAL DUP 5
  1 
  2  > SWAP 0= OR UNTIL ?TERMINAL ;
  3 
  4 : RUNLOOP SHOWALL PROMPT
  5 
  6  BEGIN ?CLEAR ( DELETE FOR PRD)
  7 
  8  ?WAITTERM DETRACT        DUP 5
  9 < IF
 10  TERMCHOICE               ELSE
 11 
 12                           DROP E
 13 NDIF
 14  ?NOTERM UNTIL ;       ;S
 15 


Scr # 172 
  0  ( VBI EXTRAS  INSTALLEM  ) FF V
  1 AR ENDSCRL
  2  CODE UPDSCRL CURSCROLL LDA, SEC
  3 , 1 # SBC,
  4  CURSCROLL STA,  ENDSCRL  CMP, 0
  5 = IF,
  6 ' BMPWDL JSR, 7 # LDA,  CURSCROL
  7 L STA, THEN,
  8  CLC, RTS, END-CODE
  9 
 10 
 11 
 12  CODE VBIX
 13 
 14    ( 8 # LDA, WCHSET 3 + STA, )
 15  CHNOW LDA, CHBASE STA,


Scr # 173 
  0    SCRLFLAG LDA, 0= IF,
  1 
  2    CLKLO LDA, 1 # AND, 0= IF, '
  3 UPDSCRL JSR, THEN, THEN,
  4    SCRLVAL  LDA, HSCROL STA,
  5 
  6     ' VBI JMP,    END-CODE
  7 
  8  : INSTALLEM ' VBIX INSTALLVBI '
  9  HBI1 INSTALLHBI ; ;S
 10 
 11 
 12 
 13 
 14 
 15 
?

Scr # 174 
  0  ( FIXINTRPTS DORTI )
  1 
  2  CODE DORTI RTI, END-CODE
  3 
  4 
  5 
  6 
  7 
  8  : FIXINTRPTS
  9 
 10   E462 INSTALLVBI
 11 
 12   ( E7B3 INSTALLHBI ) ( NOT FOR
 13 ALL VERSIONS OF O.S. ! )
 14   ' DORTI INSTALLHBI
 15 


Scr # 175 
  0   E0 CHBAS C! E0 CHBASE ! ;
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12  ;S
 13 
 14 
 15 


Scr # 176 
  0  ( RESET )
  1 
  2  0 #WORMS ! HERE 58 ALLOT <-> W1
  3  HERE 58 ALLOT <-> W2
  4             HERE 58 ALLOT <-> W3
  5  HERE 58 ALLOT <-> W4
  6  : GRIDGLIDERS  ANOFF C SCRLVAL
  7 C!
  8    CSBUILT @ IF ELSE FIXDUMMY TH
  9 EN 0 #WORMS ! 0 SEL ! INITMEM
 10     W1 INITWORM W2 INITWORM W3 I
 11 NITWORM W4 INITWORM
 12  3 F 60 1 SOUND XSND  WCHSETH CH
 13 NOW C! 06 STO ! 8 WCHSET 3 + C!
 14  7D EMIT CLEARPM INSTALLEM IWDIS
 15 PLAY
?

Scr # 177 
  0  SCRLON SUMO 7D EMIT CLEARF
  1 
  2  ( PROMPT ) CLEARPM  SCRLOFF
  3 
  4  4 0 DO I GWORM INITMOVES LOOP
  5 
  6  4 #WORMS ! 1 2F0 C! ( CURSOR OF
  7 F ) DECIMAL
  8  ( BEGIN )  RUNLOOP (  AGAIN  )
  9 
 10  RESTORE FIXINTRPTS
 11 
 12  0 2F0 C! ( CURSOR ON  ) ; DECIM
 13 AL
 14  : TASK ; IS-FENCE  FINIS    (
 15  PROF ) ;S


Scr # 178 
  0  \ WORMS? COPYRIGHT (C) 1983 BY
  1 DAVID S. MAYNARD
  2  ( WITH DISK/IO WITHOUT BUILDS
  3 )
  4  ( DOES>     APRIL  3, 1983.
  5  ) HEX
  6  CODE ?TERMINAL
  7 
  8    D01F LDA, 7 # EOR, 7 # AND,
  9 
 10    PHA, 0 # LDA, PUSH JMP,
 11 
 12    END-CODE
 13 
 14  : SOUND
 15 


Scr # 179 
  0    0232 C@ 07 AND
  1 
  2    D20F C! 0 D208 C!
  3 
  4    2 * D200 + >R >R 10 * OR
  5 
  6    EF AND
  7 
  8    100 * R> OR R> ! ;
  9 
 10 : XSND
 11 
 12   D208 D200 DO 0 I C! LOOP ;
 13 
 14 
 15 
?

